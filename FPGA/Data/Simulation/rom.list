10010010000000000000000000001000 //Jump to constant address 16777220
10010010000000000000000000111010 //Jump to constant address 16777245
10010010000000000000000000001000 //Jump to constant address 16777220
10010010000000000000000000001000 //Jump to constant address 16777220
00011100000000000000010100010001 //Set r1 to 5
00011100000000000000001000100010 //Set r2 to 2
00000011000000000000000100100011 //Compute r1 + r2 and write result to r3
00000011000000000000001100100011 //Compute r3 + r2 and write result to r3
00000011000000000000000100110011 //Compute r1 + r3 and write result to r3
00000011000000000000001100110011 //Compute r3 + r3 and write result to r3
00011100000000000000000001000100 //Set r4 to 0
00011101000000010010000001000100 //Set highest 16 bits of r4 to 288
11010000000000001010010000110000 //Write value in r3 to address in r4 with offset 10
11010000000000000000010000010000 //Write value in r1 to address in r4 with offset 0
11100000000000001010010000000100 //Read at address in r4 with offset 10 to r4
00000011000000000000010000010101 //Compute r4 + r1 and write result to r5
01100000000000000011010100010010 //(unsigned) If r5 > r1, then jump to offset 3
11111111111111111111111111111111 //Halt
00011100000000000000000000010001 //Set r1 to 0
00011100000000000000000000100010 //Set r2 to 0
00011100000000000000000110011001 //Set r9 to 1
00011100000000000001001010101010 //Set r10 to 18
10110000000000000000000010100000 //Push r10 to stack
10100000000000000000000000001011 //Pop from stack to r11
00000011000000000000101010101111 //Compute r10 + r10 and write result to r15
01010000000000000000000000001100 //Save PC to r12
00010011000000000000000111001101 //Compute r12 + 1 and write result to r13
11111111111111111111111111111111 //Halt
00011100000000000010010100010001 //Set r1 to 37
01000000000000000000000000000000 //Return from interrupt
