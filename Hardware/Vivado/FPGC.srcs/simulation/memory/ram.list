00011100000000000000001100110011 //Set r3 to 3
00011100000000000000010001000100 //Set r4 to 4
00011100000000000000000100010001 //Set r1 to 1
00011100000000000000001000100010 //Set r2 to 2
00000011000000000000000100100101 //Compute r1 + r2 and write result to r5
01100000000000000010001101010000 //(unsigned) If r3 == r5, then jump to offset 2
11111111111111111111111111111111 //Halt
00100001000000000000001000100110 //Compute r2 * (unsigned) r2 and write result to r6
01100000000000000010010001100000 //(unsigned) If r4 == r6, then jump to offset 2
11111111111111111111111111111111 //Halt
00000011000000000000000101100110 //Compute r1 + r6 and write result to r6
00100001000000000000011000100110 //Compute r6 * (unsigned) r2 and write result to r6
00100001000000000000011000100110 //Compute r6 * (unsigned) r2 and write result to r6
00000100000000000000011000100110 //Compute r6 - r2 and write result to r6
00100001000000000000011000100001 //Compute r6 * (unsigned) r2 and write result to r1
00011100000000000010001100100010 //Set r2 to 35
00000100000000000000000100100110 //Compute r1 - r2 and write result to r6
10110000000000000000000001100000 //Push r6 to stack
00100001000000000000011001000011 //Compute r6 * (unsigned) r4 and write result to r3
10100000000000000000000000000110 //Pop from stack to r6
00100001000000000000011000110110 //Compute r6 * (unsigned) r3 and write result to r6
10110000000000000000000001100000 //Push r6 to stack
00011100000000000000100101100110 //Set r6 to 9
10100000000000000000000000000110 //Pop from stack to r6
00010011000000000000001001100110 //Compute r6 + 2 and write result to r6
01100000000000000010011000110100 //(unsigned) If r6 >= r3, then jump to offset 2
11111111111111111111111111111111 //Halt
00000000000000000000011000001111 //Compute r6 OR r0 and write result to r15
11111111111111111111111111111111 //Halt
